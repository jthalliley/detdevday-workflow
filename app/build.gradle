apply plugin: 'com.android.application'

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'

    defaultConfig {
        applicationId             'com.riis.WorkflowExample'
        minSdkVersion             19
        targetSdkVersion          19
        versionCode               getThisVersionCode()
        versionName               '0.1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    lintOptions {
      abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
      exclude 'META-INF/ASL2.0'
      exclude 'META-INF/LICENSE'
      exclude 'META-INF/LICENSE.TXT'
      exclude 'META-INF/LICENSE.txt'
      exclude 'META-INF/MANIFEST.MF'
      exclude 'META-INF/NOTICE'
      exclude 'META-INF/NOTICE.TXT'
      exclude 'META-INF/NOTICE.txt'
      exclude 'META-INF/license.txt'
      exclude 'META-INF/manifest.mf'
      exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Unit Testing
    testCompile libraries.jUnit
    testCompile libraries.mockito
    testCompile libraries.robolectric
    testCompile libraries.robolectricShadowsSupport
    testCompile libraries.robolectricShadowsHttpclient

    // Networking, REST client, etc.
    compile libraries.okHttp
    compile libraries.retrofit
    compile libraries.rxAndroid
    
    // Time compuatations
    compile libraries.jodaTime

    // UI field/method injection
    compile libraries.butterKnife

    // General (non-UI) dependency injection
    compile libraries.dagger
    compile libraries.daggerCompiler

    // Workflow back-end
    //    compile libraries.commonWorkflow
}

//-------------------------------------------------------
// Better naming of the generated .apk files...
//-------------------------------------------------------
android.applicationVariants.all { variant ->
    def appName = project.hasProperty("applicationName") ? applicationName : parent.name;
    
    variant.outputs.each { output ->
        def alignment  = output.zipAlign ? "" : "-unaligned";
        def verCode = android.defaultConfig.versionCode;
        def newApkName = "${appName}-${variant.versionName}.${verCode}-${output.baseName}${alignment}.apk";

        output.outputFile = new File(output.outputFile.parent, newApkName)
    }
}

//-------------------------------------------------------
// Can supply on gradle command line via -PversionCode=N
//-------------------------------------------------------
def getThisVersionCode() {
  return project.hasProperty('versionCode') ? versionCode.toInteger() : 0;
}

